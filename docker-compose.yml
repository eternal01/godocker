version: '3.5'
networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}

services:

### Workspace Utilities ##################################
    workspace:
      build:
        context: ./workspace
        dockerfile: Dockerfile
        args:
          - GOLANG_VERSION=${GOLANG_VERSION}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - TZ=${TZ}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
        - "${WORKSPACE_SERVE_HOST_PORT}:8000"
      tty: true
      networks:
        - frontend
        - backend
      restart: always

### Etcd ##################################
    etcd: 
        build:
          context: ./etcd 
          dockerfile: Dockerfile
          args:
          - ETCD_VERSION=${ETCD_VERSION}
        environment:
          - TZ=${TZ}
          - ALLOW_NONE_AUTHENTICATION=yes
          - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
        ports: 
          - "${ETCD_PORT}:2379"
        networks:
          - frontend
          - backend
        restart: always

### Etcd-manager ##################################
    etcd-manager:
      build:
        context: ./etcd-manager
        dockerfile: Dockerfile
        args:
          - ETCD_MANAGER_VERSION=${ETCD_MANAGER_VERSION}
      environment:
        - TZ=${TZ}
      ports:
        - "${ETCD_MANAGER_PORT}:8080"      
      depends_on:                  
        - etcd                                          
      networks:
        - frontend
        - backend
      restart: always

### Minio ################################################
    minio:
      build:
        context: ./minio
        dockerfile: Dockerfile
        args:
          - MINIO_VERSION=${MINIO_VERSION}
      volumes:
        - ${DATA_PATH_HOST}/minio/data:/export
        - ${DATA_PATH_HOST}/minio/config:/root/.minio
      ports:
        - "${MINIO_PORT}:9000"
        - "${MINIO_CONSOLE_PORT}:9001"
      environment:
        - MINIO_ROOT_USER=${MINIO_ROOT_USER}
        - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      networks:
        - frontend
        - backend
      restart: always

### MySQL ################################################
    mysql:
      build:
        context: ./mysql
        dockerfile: Dockerfile
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${TZ}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - frontend
        - backend
      restart: always

### MongoDB ##############################################
    mongo:
      build: 
        context: ./mongo
        dockerfile: Dockerfile
        args:
          - MONGO_VERSION=${MONGO_VERSION}
      ports:
        - "${MONGODB_PORT}:27017"
      environment:
        - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
        - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      volumes:
        - ${DATA_PATH_HOST}/mongo:/data/db
        - ${DATA_PATH_HOST}/mongo_config:/data/configdb
      networks:
        - frontend
        - backend
      restart: always

### Redis ################################################
    redis:
      build: 
        context: ./redis
        dockerfile: Dockerfile
        args:
          - REDIS_VERSION=${REDIS_VERSION}
      volumes:
        - ${DATA_PATH_HOST}/redis:/data
      command: --requirepass ${REDIS_PASSWORD}
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - frontend
        - backend
      restart: always

### PostgreSQL ###########################################
    postgres:
      build:
        context: ./postgres
        dockerfile: Dockerfile
        args:
          - POSTGRES_VERSION=${POSTGRES_VERSION}
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
        - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - GITLAB_POSTGRES_INIT=${GITLAB_POSTGRES_INIT}
        - GITLAB_POSTGRES_USER=${GITLAB_POSTGRES_USER}
        - GITLAB_POSTGRES_PASSWORD=${GITLAB_POSTGRES_PASSWORD}
        - GITLAB_POSTGRES_DB=${GITLAB_POSTGRES_DB}
      networks:
        - frontend
        - backend
      restart: always

### PostgreSQL PostGis ###################################
    postgres-postgis:
      build:
        context: ./postgres-postgis
        dockerfile: Dockerfile
        args:
          - POSTGIS_VERSION=${POSTGIS_VERSION}
          - INSTALL_PGSQL_HTTP_FOR_POSTGIS13=${POSTGIS_INSTALL_PGSQL_HTTP_FOR_POSTGIS13}
      volumes:
        - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - frontend
        - backend
      restart: always

### RabbitMQ #############################################
    rabbitmq:
      build:
        context: ./rabbitmq
        dockerfile: Dockerfile
      ports:
        - "${RABBITMQ_NODE_HOST_PORT}:5672"
        - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
        - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
        - "${RABBITMQ_WEB_STOMP_HOST_PORT}:15674"
      privileged: true
      hostname: godocker-rabbitmq
      volumes:
        - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
        - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
        - ./rabbitmq/management_agent.disable_metrics_collector.conf:/etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
      networks:
        - frontend
        - backend
      restart: always

### ElasticSearch ########################################
    elasticsearch:
      build:
        context: ./elasticsearch
        dockerfile: Dockerfile
        args:
          - ELK_VERSION=${ELK_VERSION}
      volumes:
        - elasticsearch:/usr/share/elasticsearch/data
      environment:
        - cluster.name=godocker-cluster
        - node.name=godocker-node
        - bootstrap.memory_lock=true
        - xpack.security.enabled=false
        - xpack.security.transport.ssl.enabled=false
        - indices.id_field_data.enabled=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - cluster.initial_master_nodes=godocker-node
      ulimits:
        memlock:
          soft: -1
          hard: -1
        nofile:
          soft: 65536
          hard: 65536
      ports:
        - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
        - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
      networks:
        - frontend
        - backend
      restart: always

### Logstash ##############################################
    logstash:
      build:
        context: ./logstash
        dockerfile: Dockerfile
        args:
          - ELK_VERSION=${ELK_VERSION}
      volumes:
        - './logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml'
        - './logstash/pipeline:/usr/share/logstash/pipeline'
      ports:
        - '5001:5001'
      environment:
        LS_JAVA_OPTS: '-Xmx1g -Xms1g'
      env_file:
        - .env
      networks:
        - frontend
        - backend
      depends_on:
        - elasticsearch
      restart: always

### Kibana ##############################################
    kibana:
      build:
        context: ./kibana
        dockerfile: Dockerfile
        args:
          - ELK_VERSION=${ELK_VERSION}
      ports:
        - "${KIBANA_HTTP_PORT}:5601"
      depends_on:
        - elasticsearch
      networks:
        - frontend
        - backend
      restart: always

### Portainer ################################################
    portainer:
      build:
        context: ./portainer
        dockerfile: Dockerfile
        args:
          - PORTAINER_VERSION=${PORTAINER_VERSION}
      volumes:
        - ${DATA_PATH_HOST}/portainer_data:/data
        - /var/run/docker.sock:/var/run/docker.sock
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - 9010:9000
      networks:
        - frontend
        - backend
      restart: always

### Gitlab ################################################
    gitlab:
      build:
        context: ./gitlab
        dockerfile: Dockerfile
      environment:
        GITLAB_OMNIBUS_CONFIG: |
          external_url '${GITLAB_DOMAIN_NAME}'
          redis['enable'] = false
          nginx['listen_https'] = false
          nginx['listen_port'] = 80
          nginx['custom_gitlab_server_config'] = "set_real_ip_from 172.0.0.0/8;\nreal_ip_header X-Real-IP;\nreal_ip_recursive on;"
          postgresql['enable'] = false
          gitlab_rails['trusted_proxies'] = ['caddy','nginx','apache2']
          gitlab_rails['redis_host'] = 'redis'
          gitlab_rails['redis_database'] = 8
          gitlab_rails['db_host'] = '${GITLAB_POSTGRES_HOST}'
          gitlab_rails['db_username'] = '${GITLAB_POSTGRES_USER}'
          gitlab_rails['db_password'] = '${GITLAB_POSTGRES_PASSWORD}'
          gitlab_rails['db_database'] = '${GITLAB_POSTGRES_DB}'
          gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
          gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_HOST_SSH_PORT}
      volumes:
        - ${DATA_PATH_HOST}/gitlab/config:/etc/gitlab
        - ${DATA_PATH_HOST}/gitlab/data:/var/opt/gitlab
        - ${GITLAB_HOST_LOG_PATH}:/var/log/gitlab
      ports:
        - "${GITLAB_HOST_HTTP_PORT}:80"
        - "${GITLAB_HOST_HTTPS_PORT}:443"
        - "${GITLAB_HOST_SSH_PORT}:22"
      networks:
        - frontend
        - backend
      depends_on:
        - redis
        - postgres
    gitlab-runner:
      image: gitlab/gitlab-runner:latest
      environment:
        - CI_SERVER_URL=${GITLAB_CI_SERVER_URL}
        - REGISTRATION_TOKEN=${GITLAB_RUNNER_REGISTRATION_TOKEN}
        - RUNNER_NAME=${COMPOSE_PROJECT_NAME}-runner
        - REGISTER_NON_INTERACTIVE=${GITLAB_REGISTER_NON_INTERACTIVE}
        - RUNNER_EXECUTOR=shell
      volumes:
        - ${DATA_PATH_HOST}/gitlab/runner:/etc/gitlab-runner
        - /var/run/docker.sock:/var/run/docker.sock:rw
      restart: always

### kafka ####################################################
    kafka:
      image: wurstmeister/kafka
      ports:
        - "9092:9092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
        KAFKA_MESSAGE_MAX_BYTES: 2000000
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      volumes:
        - ${DATA_PATH_HOST}/kafka:/kafka
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
        - frontend
        - backend
      restart: always

### kafka-manager ###########################################
    kafka-manager:
      image: sheepkiller/kafka-manager
      ports:
        - 9020:9000
      environment:
        ZK_HOSTS: zookeeper:2181
      networks:
        - frontend
        - backend
      restart: always

### Grafana ################################################
    grafana:
      build:
        context: ./grafana
        dockerfile: Dockerfile
        args:
          - GRAFANA_VERSION=${GRAFANA_VERSION}
      # volumes:
      #   - ${DATA_PATH_HOST}/grafana:/var/lib/grafana
      environment:
        - TZ=${TZ}
      ports:
        - "${GRAFANA_PORT}:3000"
      networks:
        - frontend
        - backend
      restart: always

### SWAGGER EDITOR ############################################
    swagger-editor:
      build:
        context: ./swagger-editor
        dockerfile: Dockerfile
      ports:
        - ${SWAGGER_EDITOR_PORT}:8080
      networks:
        - frontend
        - backend
      restart: always

### SWAGGER UI ################################################
    swagger-ui:
      build:
        context: ./swagger-ui
        dockerfile: Dockerfile
      environment:
        - API_URL=${SWAGGER_API_URL}
      ports:
        - ${SWAGGER_UI_PORT}:8080
      networks:
        - frontend
        - backend
      restart: always

### TRAEFIK #########################################
    traefik:
      build:
        context: ./traefik
        dockerfile: Dockerfile
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./traefik/data:/data
      command:
        - "--api"
        - "--providers.docker.exposedbydefault=false"
        - "--accesslog.filepath=/data/access.log"
        # entrypoints
        - "--entrypoints.http.address=:${TRAEFIK_HOST_HTTP_PORT}"
        - "--entrypoints.http.http.redirections.entrypoint.to=https"
        - "--entrypoints.https.address=:${TRAEFIK_HOST_HTTPS_PORT}"
        - "--entrypoints.traefik.address=:${TRAEFIK_DASHBOARD_PORT}"
        # certificatesresolvers
        - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
        - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
        - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
      ports:
        - "${TRAEFIK_HOST_HTTP_PORT}:${TRAEFIK_HOST_HTTP_PORT}"
        - "${TRAEFIK_HOST_HTTPS_PORT}:${TRAEFIK_HOST_HTTPS_PORT}"
        - "${TRAEFIK_DASHBOARD_PORT}:${TRAEFIK_DASHBOARD_PORT}"
      networks:
        - frontend
        - backend
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`${ACME_DOMAIN}`)"
        - "traefik.http.routers.traefik.entrypoints=traefik"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.middlewares=access-auth"
        - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
        - "traefik.http.middlewares.access-auth.basicauth.realm=Login Required"
        - "traefik.http.middlewares.access-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}"

### PROMETHEUS #########################################
    prometheus:
        build:
          context: ./prometheus
          dockerfile: Dockerfile
          args:
          - PROMETHEUS_VERSION=${PROMETHEUS_VERSION}
        environment:
          - TZ=${TZ}
        volumes:
          - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml 
        ports:
          - "${PROMETHEUS_PORT}:9090" 
        networks:
          - frontend
          - backend
        restart: always

### JAEGER #########################################
    jaeger:
        build:
          context: ./jaeger
          dockerfile: Dockerfile
          args:
          - JAEGER_VERSION=${JAEGER_VERSION}
        environment:
          - TZ=${TZ}
        ports:
          - "${JAEGER_PORT}:16686" 
        networks:
          - frontend
          - backend
        restart: always

### DTM #########################################
    dtm:
      build:
        context: ./dtm
        dockerfile: Dockerfile
        args:
          - DTM_VERSION=${DTM_VERSION}
      environment:
        - TZ=${TZ}
      entrypoint:
        - "/app/dtm/dtm"
        - "-c=/app/dtm/configs/config.yaml"
      volumes:
        - ./dtm/config.yml:/app/dtm/configs/config.yaml 
      ports:
        - "${DTM_HTTP_PORT}:36789"
        - "${DTM_GRPC_PORT}:36790"
      networks:
        - frontend
        - backend
      restart: always
